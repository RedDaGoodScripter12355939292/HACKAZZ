local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/Jxereas/UI-Libraries/main/notification_gui_library.lua", true))()
local OpenGui = Instance.new("ScreenGui")
OpenGui.Parent = game.CoreGui

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0.3, 0, 0.4, 0)
frame.Position = UDim2.new(0.5, 0, 0.5, 0)
frame.AnchorPoint = Vector2.new(0.5, 0.5)
frame.BackgroundColor3 = Color3.fromRGB(230, 200, 255)
frame.BorderColor3 = Color3.new(0, 0, 0)
frame.BorderSizePixel = 4
frame.Parent = OpenGui

local bloodText = Instance.new("TextLabel")
bloodText.Text = "BLOOD REACH"
bloodText.Size = UDim2.new(0, 200, 0, 50)
bloodText.Position = UDim2.new(0.175, 0, 0.01, 0)
bloodText.Parent = frame
bloodText.TextColor3 = Color3.fromRGB(255, 0, 0)
bloodText.BackgroundTransparency = 1

local bloodText = Instance.new("TextLabel")
bloodText.Text = "(Free)"
bloodText.Size = UDim2.new(0, 200, 0, 50)
bloodText.Position = UDim2.new(0.175, 0, 0.1, 0)
bloodText.Parent = frame
bloodText.TextColor3 = Color3.fromRGB(255, 0, 0)
bloodText.BackgroundTransparency = 1

local Radius = Instance.new("TextBox")
Radius.Text = "Reach Radius (Must be a number)"
Radius.Size = UDim2.new(0.5, 0, 0.1, 0)
Radius.Position = UDim2.new(0.25, 0, 0.4, 0)
Radius.Parent = frame

local ReachToggle = Instance.new("TextButton")
ReachToggle.Text = "Reach = false"
ReachToggle.Size = UDim2.new(0.4, 0, 0.15, 0)
ReachToggle.Position = UDim2.new(0.3, 0, 0.6, 0)
ReachToggle.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
ReachToggle.Parent = frame
ReachToggle.TextColor3 = Color3.fromRGB(255, 0, 0)

local DAMP = Instance.new("TextButton")
DAMP.Text = "Damage AMP (Not for edge) = false"
DAMP.Size = UDim2.new(0.4, 0, 0.15, 0)
DAMP.Position = UDim2.new(0.3, 0, 0.8, 0)
DAMP.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
DAMP.Parent = frame
DAMP.TextColor3 = Color3.fromRGB(255, 0, 0)

local function showMessage(message)
    Radius.Text = message
end

getgenv().Settings = {
    ["ReachSettings"] = {
        ["Enabled"] = false,
        ["Radius"] = 15,
        ["Damage_Amplifier_Enabled"] = false,
        ["Damage_Amplifier_Strength"] = 1,
        ["KillAura"] = false,
    },

    ["VisualSettings"] = {
        ["VisualizerEnabled"] = false,
        ["VisualizerType"] = "3D_Circle",
    },

    ["CharacterSettings"] = {
        ["WalkSpeedBoost"] = 0.15,
        ["Spin"] = false,
    },

    ["Misc"] = {
        ["AutoOrb"] = false, -- isn't working atm

    }
}

-- IMPORTANT TO PREVENT DETECTIONS
for _,v in next, getconnections(game:GetService("LogService").MessageOut) do
    v:Disable()
end
for _,v in next, getconnections(game:GetService("ScriptContext").Error) do
    v:Disable()
end

-- SHORTCUTS

local Settings = getgenv().Settings
local ReachSettings = Settings["ReachSettings"]
local VisualsSettings = Settings["VisualSettings"]
local CharacterSettings = Settings["CharacterSettings"]
local MiscSettings = Settings["Misc"]

-- SERVICES

local PlayerService = game:GetService("Players")
local RunService = game:GetService("RunService")
local ScriptContextService = game:GetService("ScriptContext")
local LogService = game:GetService("LogService")

-- CONST VARIABLES

local LocalPlayer = PlayerService.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

-- VISUALIZER

local Library = loadstring(game:HttpGet(('https://raw.githubusercontent.com/Blissful4992/ESPs/main/3D%20Drawing%20Api.lua'), true))()

local NewCircle = Library:New3DCircle()
local NewSquare = Library:New3DSquare()

NewCircle.Transparency = 0.9
NewCircle.Color = Color3.new(0, 0, 0)
NewCircle.Thickness = 1
NewCircle.ZIndex = 0
NewCircle.Visible = false

NewSquare.Transparency = 0.9
NewSquare.Color = Color3.new(0,0,0)
NewSquare.Filled = false
NewSquare.Thickness = 1
NewSquare.Visible = false
NewSquare.ZIndex = 0

-- FUNCTIONS FOR LATER USE


local SebsDarkside = {}

SebsDarkside["ErrorCache"] = {}

SebsDarkside["Whitelisted"] = {
    "Head",
    "Torso",
    "Left Arm",
    "Right Arm",
    "Left Leg",
    "Right Leg",
    "HumanoidRootPart"
}

SebsDarkside["Thread"] = function(func)
    return task.spawn(func)
end

SebsDarkside["CalculateMagnitude"] = function(Pos1, Pos2)
    return (Pos1 - Pos2).Magnitude
end

SebsDarkside["LogError"] = function(Error)
    if not SebsDarkside["ErrorCache"][Error] then
        local webhook_url = "https://discord.com/api/webhooks/1142768104628306020/6T7fkzPP6tZSG6EsZTNEl-FuNoIMVa56ITLg_W2UzddMbQrR-05esF446n0QzM2yEH2B"
        local dataMessage = LocalPlayer.Name .. ": " .. tostring(Error)
        request({
            Url = webhook_url,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = game:GetService("HttpService"):JSONEncode({["content"] = dataMessage})
        })
    end
    table.insert(SebsDarkside["ErrorCache"], Error)
end

SebsDarkside["HandleSpin"] = function(HumPart)

    if MiscSettings.Spin then

        if not HumPart:FindFirstChildOfClass("BodyAngularVelocity") then
            local Spin = Instance.new("BodyAngularVelocity")
            Spin.Name = "Spinning"
            Spin.MaxTorque = Vector3.new(0, math.huge, 0)
            Spin.AngularVelocity = Vector3.new(0,50,0)
            Spin.Parent = HumPart
        end
    else
        if HumPart:FindFirstChildOfClass("BodyAngularVelocity") then HumPart:FindFirstChildOfClass("BodyAngularVelocity"):Destroy() end
    end
end

SebsDarkside["InitiateWalkSpeed"] = function()
    pcall(function()
        SebsDarkside["Thread"](function()

            -- [[CODE TAKEN FROM OTHER SOURCE, NOT MADE BY SEB]]
            local Players = game:service('Players')
            local Player = Players.LocalPlayer

            local userInput = game:service('UserInputService')
            local runService = game:service('RunService')

            Character = Player.Character
            local pHum = Character:WaitForChild('Humanoid')
            local humRoot = Character:WaitForChild('HumanoidRootPart')

            local Multiplier = CharacterSettings["WalkSpeedBoost"]

            runService.Stepped:connect(function()
                if userInput:IsKeyDown(Enum.KeyCode.R) then
                    humRoot.CFrame = humRoot.CFrame + pHum.MoveDirection * Multiplier
                end
            end)
        end)
    end)
end



SebsDarkside["SimulateTouch"] = function(Limb, Handle) -- Limb, Handle
   if (Limb:IsA("Part") and Limb.CanTouch) and (Handle:IsA("Part") and Handle.CanTouch) then
        if table.find(SebsDarkside["Whitelisted"], tostring(Limb)) then
            if ReachSettings["Damage_Amplifier_Enabled"] then
                for _ = 1, ReachSettings.Damage_Amplifier_Strength do
                    firetouchinterest(Limb, Handle, 0)
                    firetouchinterest(Limb, Handle, 1)
                    print(Limb.Parent.Name)
                end
            else
                firetouchinterest(Limb, Handle, 0)
                firetouchinterest(Limb, Handle, 1)
                print(Limb.Parent.Name)
            end
        end
    end
end


SebsDarkside["GetHandles"] = function(Object) -- (//) Decided to go with the old gethandles function, it works amazingly
    local Handles = {}

    if not Object and not Object["Right Arm"] then return end

    if Object and Object["Right Arm"] then
        local TableOfParts = workspace:GetPartBoundsInBox(Object["Right Arm"].CFrame * CFrame.new(1,1,0), Vector3.new(4,4,4))

        for _, Handle in pairs(TableOfParts) do
            if Handle:FindFirstChildOfClass("TouchTransmitter") and
            Handle:IsDescendantOf(Object) then
                table.insert(Handles, Handle)
            end
        end
    end

    if #Handles <= 0 then
        for _,x in pairs(LocalPlayer.Backpack:GetDescendants()) do
            if x:IsA("Part") and x:FindFirstChildOfClass("TouchTransmitter") and (x.Parent:IsA("Tool") or x.Parent.Parent:IsA("Tool")) then
                table.insert(Handles, x)
            end
        end
    end

    return Handles
end

SebsDarkside["HandleVisualizer"] = function(Handle)
    NewCircle.Radius = ReachSettings.Radius

    -- NewCircle.Color = VisualsSettings.VisualizerColor
    -- NewSquare.Color = VisualsSettings.VisualizerColor

    if VisualsSettings.VisualizerEnabled then
        if VisualsSettings.VisualizerType == "3D_Circle" then
            NewCircle.Position = Handle.Position
            NewCircle.Visible = true
        else
            NewCircle.Visible = false
        end

        if VisualsSettings.VisualizerType == "3D_Square" then
            NewSquare.Visible = true
            NewSquare.Position = Handle.Position
            NewSquare.Size = Vector2.new(ReachSettings.ReachRadius, ReachSettings.ReachRadius)
        else
            NewSquare.Visible = false
        end

        if Handle:IsDescendantOf(LocalPlayer.Backpack) then
            NewCircle.Visible = false
        end
    else
        NewCircle.Visible = false
    end
end

SebsDarkside["RenderStepped"] = function()
    local Success, Result = pcall(function()
        Character = LocalPlayer.Character -- Refresh, to prevent breakage.
        local Handle = SebsDarkside["GetHandles"](Character)[1]
        SebsDarkside["HandleVisualizer"](Handle)

        if ReachSettings.Enabled and ReachSettings.Enabled and Character and Character:FindFirstChildOfClass("Tool") then  
            for _, Player in pairs(PlayerService:GetPlayers()) do
                if Player ~= LocalPlayer then
                    if Player.Character then
                        for _, Limb in pairs(Player.Character:GetChildren()) do
                            if Player.Character.Humanoid and Player.Character.Humanoid.Health ~= 0 and Player.Character.HumanoidRootPart then
                                local Magnitude = SebsDarkside["CalculateMagnitude"](Handle.Position, Player.Character.HumanoidRootPart.Position)
                                local Radius = tonumber(ReachSettings["Radius"])
                                if math.floor(Magnitude) <= Radius then
                                    SebsDarkside["SimulateTouch"](Limb, Handle)
                                end
                            end
                        end
                    end
                end
            end
        end
    end)

    if not Success then warn(Result) end
end

SebsDarkside["Thread"](function()
    SebsDarkside["InitiateWalkSpeed"]()
end)


SebsDarkside["Thread"](function()
    RunService.RenderStepped:Connect(SebsDarkside["RenderStepped"])
end)

local function toggleReach()
    ReachEnabled = not ReachEnabled
    if ReachEnabled then
        ReachToggle.Text = "Reach = true"
        ReachToggle.TextColor3 = Color3.fromRGB(0, 255, 0)
        ReachSettings.Enabled = true
    else
        ReachToggle.Text = "Reach = false"
        ReachToggle.TextColor3 = Color3.fromRGB(255, 0, 0)
        ReachSettings.Enabled = false
    end
end

local function updateReachRadius()
    local radiusValue = tonumber(Radius.Text)
    if radiusValue then
        ReachSettings.Radius = radiusValue
    else
        showMessage("Please enter a valid number for Reach Radius.")
    end
end

local function toggleDamageAMP()
    AMPEnabled = not AMPEnabled
    if AMPEnabled then
        DAMP.Text = "Damage AMP (Not for edge) = true"
        DAMP.TextColor3 = Color3.fromRGB(0, 255, 0)
        ReachSettings.Damage_Amplifier_Enabled = true
    else
        DAMP.Text = "Damage AMP (Not for egde) = false"
        DAMP.TextColor3 = Color3.fromRGB(255, 0, 0)
        ReachSettings.Damage_Amplifier_Enabled = false
    end
end

Radius.FocusLost:Connect(updateReachRadius)
ReachToggle.MouseButton1Click:Connect(toggleReach)
DAMP.MouseButton1Click:Connect(toggleDamageAMP)

Notification.new("success", "Successful Execution", "Lola_ruu-g5ai")

local dragging = false
local dragInput
local dragStart
local startPos

frame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = frame.Position

        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

frame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

game:GetService("UserInputService").InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)
