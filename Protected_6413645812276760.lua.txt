local Security = {}
Security.DetectedHooks = {}
Security.OriginalFunctions = {}

local WebhookServer = "https://spheroidpyworks.pythonanywhere.com/report_exploit"
local Request = http_request or request or HttpPost or (syn and syn.request)
local function preserve(name, func)
    if typeof(func) == "function" then
        Security.OriginalFunctions[name] = func
    else
        warn("[Spheroid]: " .. name .. " not found, skipping...")
    end
end

preserve("loadstring", loadstring)
preserve("HttpGet", game.HttpGet)
preserve("request", Request)

function Security.IsHooked(name, func)
    return type(func) ~= "function" or func ~= Security.OriginalFunctions[name]
end

function Security.DetectLoadstringHook()
    if Security.OriginalFunctions.loadstring then
        local oldLoadstring = Security.OriginalFunctions.loadstring
        local success, result = pcall(function()
            local testFunc = oldLoadstring("return 'Tryna hook loadstring?'") 
            return testFunc and testFunc() == "Tryna hook loadstring?"
        end)

        if not success or not result then
            table.insert(Security.DetectedHooks, "loadstring")
        end
    end
end

function Security.DetectHttpInterception()
    if Security.OriginalFunctions.request then
        local success, response = pcall(function()
            return Security.OriginalFunctions.request({
                Url = "https://spheroidpyworks.pythonanywhere.com/http_test",
                Method = "GET"
            })
        end)

        if success and response then
            if response.Url and not response.Url:find("spheroidpyworks.pythonanywhere.com/http_test") then
                table.insert(Security.DetectedHooks, "Http Hooked")
            end

            local bodyString = tostring(response.Body)
            if not bodyString:lower():find("spheroid") then
                table.insert(Security.DetectedHooks, "Http Interception Detected")
            end
        else
            table.insert(Security.DetectedHooks, "Http Interception or Request Tampering")
        end
    end
end

function Security.RestoreFunctions()
    for name, func in pairs(Security.OriginalFunctions) do
        if Security.IsHooked(name, func) then
            rawset(getfenv(), name, Security.OriginalFunctions[name])
        end
    end
end

-- **ðŸš¨ Report Exploit Attempts**
function Security.ReportExploit()
    local playerName = game.Players.LocalPlayer.Name
    local exploitDetails = {
        player = playerName,
        detectedHooks = Security.DetectedHooks,
        GID = getgenv().UID or "BloodFree"
    }

    if Security.OriginalFunctions.request then
        pcall(function()
            Security.OriginalFunctions.request({
                Url = WebhookServer,
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = HttpService:JSONEncode(exploitDetails)
            })
        end)
    else
        warn("[Spheroid]: Unable to report exploit (request function missing)")
    end
end

Security.DetectLoadstringHook()
Security.DetectHttpInterception()

if #Security.DetectedHooks > 0 then
    Security.ReportExploit()
    pcall(function() game.Players.LocalPlayer:Kick("Tampering Detected: " .. table.concat(Security.DetectedHooks, ", ")) end)
    error("[Spheroid]: ðŸ›‘ Hooks detected: " .. table.concat(Security.DetectedHooks, ", "))
    return
end

local OpenGui = Instance.new("ScreenGui")
OpenGui.Parent = game.CoreGui

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0.3, 0, 0.4, 0)
frame.Position = UDim2.new(0.5, 0, 0.5, 0)
frame.AnchorPoint = Vector2.new(0.5, 0.5)
frame.BackgroundColor3 = Color3.fromRGB(230, 200, 255)
frame.BorderColor3 = Color3.new(0, 0, 0)
frame.BorderSizePixel = 4
frame.Parent = OpenGui

local bloodText = Instance.new("TextLabel")
bloodText.Text = "BLOOD REACH"
bloodText.Size = UDim2.new(0, 200, 0, 50)
bloodText.Position = UDim2.new(0.175, 0, 0.01, 0)
bloodText.Parent = frame
bloodText.TextColor3 = Color3.fromRGB(255, 0, 0)
bloodText.BackgroundTransparency = 1

local bloodText = Instance.new("TextLabel")
bloodText.Text = "(Free)"
bloodText.Size = UDim2.new(0, 200, 0, 50)
bloodText.Position = UDim2.new(0.175, 0, 0.1, 0)
bloodText.Parent = frame
bloodText.TextColor3 = Color3.fromRGB(255, 0, 0)
bloodText.BackgroundTransparency = 1

local Radius = Instance.new("TextBox")
Radius.Text = "Reach Radius (Must be a number)"
Radius.Size = UDim2.new(0.5, 0, 0.1, 0)
Radius.Position = UDim2.new(0.25, 0, 0.4, 0)
Radius.Parent = frame

local ReachToggle = Instance.new("TextButton")
ReachToggle.Text = "Reach = false"
ReachToggle.Size = UDim2.new(0.4, 0, 0.15, 0)
ReachToggle.Position = UDim2.new(0.3, 0, 0.6, 0)
ReachToggle.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
ReachToggle.Parent = frame
ReachToggle.TextColor3 = Color3.fromRGB(255, 0, 0)

local DAMP = Instance.new("TextButton")
DAMP.Text = "Damage AMP = false"
DAMP.Size = UDim2.new(0.4, 0, 0.15, 0)
DAMP.Position = UDim2.new(0.3, 0, 0.8, 0)
DAMP.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
DAMP.Parent = frame
DAMP.TextColor3 = Color3.fromRGB(255, 0, 0)

local function showMessage(message)
    Radius.Text = message
end

-- Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§.    Settings.    Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§
getgenv().Config = {
    ["Reach"] = {
        ["ReachEnabled"] = false,
        ["ReachRadius"] = 25,
        ["Lunge_Only"] = false,
        ["Damage_AMP"] = false,
        ["Auto_Swing"] = false,
    }
}

local ReachConfig = getgenv().Config.Reach

-- Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§.    Functions.    Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§
local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/Jxereas/UI-Libraries/main/notification_gui_library.lua", true))()
local PlayerService = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = PlayerService.LocalPlayer
local LPCharacter = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()


local GetHandles = function(Character)
    local Handles = {}

	if not Character and not Character["Right Arm"] then return end

    if Character and Character["Right Arm"] then
        local TableOfParts = workspace:GetPartBoundsInBox(Character["Right Arm"].CFrame * CFrame.new(1,1,0), Vector3.new(4,4,4))

        for _, Handle in pairs(TableOfParts) do
            if Handle:FindFirstChildOfClass("TouchTransmitter") and
            Handle:IsDescendantOf(Character) then
                table.insert(Handles, Handle)
            end
        end
    end

    if #Handles <= 0 then
        for _,x in pairs(LocalPlayer.Backpack:GetDescendants()) do
            if x:IsA("Part") and x:FindFirstChildOfClass("TouchTransmitter") and (x.Parent:IsA("Tool") or x.Parent.Parent:IsA("Tool")) then
                table.insert(Handles, x)
            end
        end
    end

    return Handles
end


local IsLunging = function(Handle)
    local tool; do
        if Handle.Parent:IsA("Tool") then tool = Handle.Parent end
        if Handle.Parent.Parent:IsA("Tool") then tool = Handle.Parent.Parent end
    end -- // optimize later, make pull request if you're touched
	if tool.GripUp == Vector3.new(1,0,0) then
		return true
	end
	return false
end

local function ValidateLimbIntegrity(Limb)
    local RealLimbs = {
        "Right Arm",
        "RightArm",
        "Right Leg",
        "RightLeg",
        "LeftArm",
        "LeftLeg",
        "Left Arm",
        "Left Leg",
        "Torso",
        "Head"
    }

    if Limb:IsA("Part") and Limb.CanTouch then
        local LimbName = Limb.Name
        local LimbChar = Limb.Parent
        local Humanoid = LimbChar:FindFirstChild("Humanoid")

        if Humanoid and table.find(RealLimbs, LimbName) then
            local Validated = Humanoid:GetLimb(Limb)
            if Validated then
                return true
            end
        end
    end

    return false
end


local function FakeTouchEvent(Handle, Limb) -- will be writing more for next update
    firetouchinterest(Handle, Limb, 1)
    firetouchinterest(Handle, Limb, 0)
end

RunService.RenderStepped:Connect(function(deltaTime)
    local d,ebug = pcall(function()
        if LocalPlayer.Character and (LPCharacter ~= LocalPlayer.Character) then LPCharacter = LocalPlayer.Character end
        if not ReachConfig.ReachEnabled then return end
        for _, Player in PlayerService:GetPlayers() do
            if Player ~= LocalPlayer then
                local MainHandle = GetHandles(LPCharacter)[1] -- Likely
                local SwordEquipped = false
                if LPCharacter:FindFirstChild("Sword") then
                    SwordEquipped = true
                end
                if ReachConfig.ReachEnabled and SwordEquipped and Player.Character and Player.Character.Humanoid and Player.Character.Humanoid.Health ~= 0 then
                    local OppCharacter = Player.Character

                    if OppCharacter:FindFirstChild("HumanoidRootPart") then
            
                        local DistPart2 = OppCharacter:FindFirstChild("HumanoidRootPart")

                        if (MainHandle.Position - DistPart2.Position).Magnitude <= tonumber(ReachConfig.ReachRadius) then
            
                            for _, Limb in OppCharacter:GetChildren() do
                                if ValidateLimbIntegrity(Limb) then
                                    if ReachConfig.Lunge_Only then
                                        if IsLunging(MainHandle) then
                                            for i = 1, ReachConfig.Damage_AMP and 3 or 1 do
                                                FakeTouchEvent(MainHandle, Limb)
                                            end
                                        end
                                    else
                                        for i = 1, ReachConfig.Damage_AMP and 3 or 1 do
                                            FakeTouchEvent(MainHandle, Limb)
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end)
    if not d then warn(ebug) end
end)

local function toggleReach()
    ReachEnabled = not ReachEnabled
    if ReachEnabled then
        ReachToggle.Text = "Reach = true"
        ReachToggle.TextColor3 = Color3.fromRGB(0, 255, 0)
        ReachConfig.ReachEnabled = true
    else
        ReachToggle.Text = "Reach = false"
        ReachToggle.TextColor3 = Color3.fromRGB(255, 0, 0)
        ReachConfig.ReachEnabled = false
    end
end

local function updateReachRadius()
    local radiusValue = tonumber(Radius.Text)
    if radiusValue then
        ReachConfig.ReachRadius = radiusValue
    else
        showMessage("Please enter a valid number for Reach Radius.")
    end
end

local function toggleDamageAMP()
    AMPEnabled = not AMPEnabled
    if AMPEnabled then
        DAMP.Text = "Damage AMP = true"
        DAMP.TextColor3 = Color3.fromRGB(0, 255, 0)
        ReachConfig.Damage_AMP = true
    else
        DAMP.Text = "Damage AMP = false"
        DAMP.TextColor3 = Color3.fromRGB(255, 0, 0)
        ReachConfig.Damage_AMP = false
    end
end

Radius.FocusLost:Connect(updateReachRadius)
ReachToggle.MouseButton1Click:Connect(toggleReach)
DAMP.MouseButton1Click:Connect(toggleDamageAMP)

Notification.new("success", "Successful Execution", "Lola_ruu-g5ai")

local dragging = false
local dragInput
local dragStart
local startPos

frame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = frame.Position

        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

frame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

game:GetService("UserInputService").InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)
